{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/kouya/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"C:/Users/kouya/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"C:/Users/kouya/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/kouya/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/kouya/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/kouya/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kouya/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\nvar Component = /*#__PURE__*/function () {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  function Component(name, instanceFactory, type) {\n    _classCallCheck(this, Component);\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\n    this.onInstanceCreated = null;\n  }\n  _createClass(Component, [{\n    key: \"setInstantiationMode\",\n    value: function setInstantiationMode(mode) {\n      this.instantiationMode = mode;\n      return this;\n    }\n  }, {\n    key: \"setMultipleInstances\",\n    value: function setMultipleInstances(multipleInstances) {\n      this.multipleInstances = multipleInstances;\n      return this;\n    }\n  }, {\n    key: \"setServiceProps\",\n    value: function setServiceProps(props) {\n      this.serviceProps = props;\n      return this;\n    }\n  }, {\n    key: \"setInstanceCreatedCallback\",\n    value: function setInstanceCreatedCallback(callback) {\n      this.onInstanceCreated = callback;\n      return this;\n    }\n  }]);\n  return Component;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\nvar Provider = /*#__PURE__*/function () {\n  function Provider(name, container) {\n    _classCallCheck(this, Provider);\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n    this.instancesOptions = new Map();\n    this.onInitCallbacks = new Map();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n  _createClass(Provider, [{\n    key: \"get\",\n    value: function get(identifier) {\n      // if multipleInstances is not supported, use the default name\n      var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n      if (!this.instancesDeferred.has(normalizedIdentifier)) {\n        var deferred = new Deferred();\n        this.instancesDeferred.set(normalizedIdentifier, deferred);\n        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n          // initialize the service if it can be auto-initialized\n          try {\n            var instance = this.getOrInitializeService({\n              instanceIdentifier: normalizedIdentifier\n            });\n            if (instance) {\n              deferred.resolve(instance);\n            }\n          } catch (e) {\n            // when the instance factory throws an exception during get(), it should not cause\n            // a fatal error. We just return the unresolved promise in this case.\n          }\n        }\n      }\n      return this.instancesDeferred.get(normalizedIdentifier).promise;\n    }\n  }, {\n    key: \"getImmediate\",\n    value: function getImmediate(options) {\n      var _a;\n      // if multipleInstances is not supported, use the default name\n      var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\n      var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        try {\n          return this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n        } catch (e) {\n          if (optional) {\n            return null;\n          } else {\n            throw e;\n          }\n        }\n      } else {\n        // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n        if (optional) {\n          return null;\n        } else {\n          throw Error(\"Service \".concat(this.name, \" is not available\"));\n        }\n      }\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent() {\n      return this.component;\n    }\n  }, {\n    key: \"setComponent\",\n    value: function setComponent(component) {\n      if (component.name !== this.name) {\n        throw Error(\"Mismatching Component \".concat(component.name, \" for Provider \").concat(this.name, \".\"));\n      }\n      if (this.component) {\n        throw Error(\"Component for \".concat(this.name, \" has already been provided\"));\n      }\n      this.component = component;\n      // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n      if (!this.shouldAutoInitialize()) {\n        return;\n      }\n      // if the service is eager, initialize the default instance\n      if (isComponentEager(component)) {\n        try {\n          this.getOrInitializeService({\n            instanceIdentifier: DEFAULT_ENTRY_NAME\n          });\n        } catch (e) {\n          // when the instance factory for an eager Component throws an exception during the eager\n          // initialization, it should not cause a fatal error.\n          // TODO: Investigate if we need to make it configurable, because some component may want to cause\n          // a fatal error in this case?\n        }\n      }\n      // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n      var _iterator = _createForOfIteratorHelper(this.instancesDeferred.entries()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            instanceIdentifier = _step$value[0],\n            instanceDeferred = _step$value[1];\n          var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n          try {\n            // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n            var instance = this.getOrInitializeService({\n              instanceIdentifier: normalizedIdentifier\n            });\n            instanceDeferred.resolve(instance);\n          } catch (e) {\n            // when the instance factory throws an exception, it should not cause\n            // a fatal error. We just leave the promise unresolved.\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"clearInstance\",\n    value: function clearInstance() {\n      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n      this.instancesDeferred.delete(identifier);\n      this.instancesOptions.delete(identifier);\n      this.instances.delete(identifier);\n    }\n    // app.delete() will call this method on every provider to delete the services\n    // TODO: should we mark the provider as deleted?\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var services;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              services = Array.from(this.instances.values());\n              _context.next = 3;\n              return Promise.all([].concat(_toConsumableArray(services.filter(function (service) {\n                return 'INTERNAL' in service;\n              }) // legacy services\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              .map(function (service) {\n                return service.INTERNAL.delete();\n              })), _toConsumableArray(services.filter(function (service) {\n                return '_delete' in service;\n              }) // modularized services\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              .map(function (service) {\n                return service._delete();\n              }))));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n  }, {\n    key: \"isComponentSet\",\n    value: function isComponentSet() {\n      return this.component != null;\n    }\n  }, {\n    key: \"isInitialized\",\n    value: function isInitialized() {\n      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n      return this.instances.has(identifier);\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n      return this.instancesOptions.get(identifier) || {};\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _opts$options = opts.options,\n        options = _opts$options === void 0 ? {} : _opts$options;\n      var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n      if (this.isInitialized(normalizedIdentifier)) {\n        throw Error(\"\".concat(this.name, \"(\").concat(normalizedIdentifier, \") has already been initialized\"));\n      }\n      if (!this.isComponentSet()) {\n        throw Error(\"Component \".concat(this.name, \" has not been registered yet\"));\n      }\n      var instance = this.getOrInitializeService({\n        instanceIdentifier: normalizedIdentifier,\n        options: options\n      });\n      // resolve any pending promise waiting for the service instance\n      var _iterator2 = _createForOfIteratorHelper(this.instancesDeferred.entries()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            instanceIdentifier = _step2$value[0],\n            instanceDeferred = _step2$value[1];\n          var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n          if (normalizedIdentifier === normalizedDeferredIdentifier) {\n            instanceDeferred.resolve(instance);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return instance;\n    }\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\n  }, {\n    key: \"onInit\",\n    value: function onInit(callback, identifier) {\n      var _a;\n      var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n      var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\n      existingCallbacks.add(callback);\n      this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n      var existingInstance = this.instances.get(normalizedIdentifier);\n      if (existingInstance) {\n        callback(existingInstance, normalizedIdentifier);\n      }\n      return function () {\n        existingCallbacks.delete(callback);\n      };\n    }\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\n  }, {\n    key: \"invokeOnInitCallbacks\",\n    value: function invokeOnInitCallbacks(instance, identifier) {\n      var callbacks = this.onInitCallbacks.get(identifier);\n      if (!callbacks) {\n        return;\n      }\n      var _iterator3 = _createForOfIteratorHelper(callbacks),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var callback = _step3.value;\n          try {\n            callback(instance, identifier);\n          } catch (_a) {\n            // ignore errors in the onInit callback\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"getOrInitializeService\",\n    value: function getOrInitializeService(_ref) {\n      var instanceIdentifier = _ref.instanceIdentifier,\n        _ref$options = _ref.options,\n        options = _ref$options === void 0 ? {} : _ref$options;\n      var instance = this.instances.get(instanceIdentifier);\n      if (!instance && this.component) {\n        instance = this.component.instanceFactory(this.container, {\n          instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n          options: options\n        });\n        this.instances.set(instanceIdentifier, instance);\n        this.instancesOptions.set(instanceIdentifier, options);\n        /**\r\n         * Invoke onInit listeners.\r\n         * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n         * while onInit listeners are registered by consumers of the provider.\r\n         */\n        this.invokeOnInitCallbacks(instance, instanceIdentifier);\n        /**\r\n         * Order is important\r\n         * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n         * makes `isInitialized()` return true.\r\n         */\n        if (this.component.onInstanceCreated) {\n          try {\n            this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n          } catch (_a) {\n            // ignore errors in the onInstanceCreatedCallback\n          }\n        }\n      }\n      return instance || null;\n    }\n  }, {\n    key: \"normalizeInstanceIdentifier\",\n    value: function normalizeInstanceIdentifier() {\n      var identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n      if (this.component) {\n        return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n      } else {\n        return identifier; // assume multiple instances are supported before the component is provided.\n      }\n    }\n  }, {\n    key: \"shouldAutoInitialize\",\n    value: function shouldAutoInitialize() {\n      return !!this.component && this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */;\n    }\n  }]);\n  return Provider;\n}(); // undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\nvar ComponentContainer = /*#__PURE__*/function () {\n  function ComponentContainer(name) {\n    _classCallCheck(this, ComponentContainer);\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n  _createClass(ComponentContainer, [{\n    key: \"addComponent\",\n    value: function addComponent(component) {\n      var provider = this.getProvider(component.name);\n      if (provider.isComponentSet()) {\n        throw new Error(\"Component \".concat(component.name, \" has already been registered with \").concat(this.name));\n      }\n      provider.setComponent(component);\n    }\n  }, {\n    key: \"addOrOverwriteComponent\",\n    value: function addOrOverwriteComponent(component) {\n      var provider = this.getProvider(component.name);\n      if (provider.isComponentSet()) {\n        // delete the existing provider from the container, so we can register the new component\n        this.providers.delete(component.name);\n      }\n      this.addComponent(component);\n    }\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\n  }, {\n    key: \"getProvider\",\n    value: function getProvider(name) {\n      if (this.providers.has(name)) {\n        return this.providers.get(name);\n      }\n      // create a Provider for a service that hasn't registered with Firebase\n      var provider = new Provider(name, this);\n      this.providers.set(name, provider);\n      return provider;\n    }\n  }, {\n    key: \"getProviders\",\n    value: function getProviders() {\n      return Array.from(this.providers.values());\n    }\n  }]);\n  return ComponentContainer;\n}();\nexport { Component, ComponentContainer, Provider };","map":{"version":3,"names":["Component","name","instanceFactory","type","_classCallCheck","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","_createClass","key","value","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","Deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","resolve","e","promise","getImmediate","options","optional","_a","Error","concat","getComponent","setComponent","isComponentEager","entries","_step","_iterator","s","n","done","_step$value","_slicedToArray","instanceDeferred","err","f","clearInstance","arguments","length","undefined","delete","_callee","services","_regeneratorRuntime","wrap","_callee$","_context","prev","next","Array","from","values","Promise","all","_toConsumableArray","filter","service","map","INTERNAL","_delete","stop","_delete2","apply","isComponentSet","getOptions","initialize","opts","_opts$options","_step2","_iterator2","_step2$value","normalizedDeferredIdentifier","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","_iterator3","_createForOfIteratorHelper","_step3","_ref","_ref$options","normalizeIdentifierForFactory","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders"],"sources":["C:\\Users\\kouya\\node_modules\\@firebase\\component\\src\\component.ts","C:\\Users\\kouya\\node_modules\\@firebase\\component\\src\\constants.ts","C:\\Users\\kouya\\node_modules\\@firebase\\component\\src\\provider.ts","C:\\Users\\kouya\\node_modules\\@firebase\\component\\src\\component_container.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}