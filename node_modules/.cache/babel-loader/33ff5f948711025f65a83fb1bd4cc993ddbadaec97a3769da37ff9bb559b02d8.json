{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/kouya/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/kouya/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/kouya/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Users/kouya/AppData/Roaming/npm/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _ConsoleMethod;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A container for all of the Logger instances\r\n */\nvar instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nvar levelStringToEnum = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n/**\r\n * The default log level\r\n */\nvar defaultLogLevel = LogLevel.INFO;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\nvar ConsoleMethod = (_ConsoleMethod = {}, _defineProperty(_ConsoleMethod, LogLevel.DEBUG, 'log'), _defineProperty(_ConsoleMethod, LogLevel.VERBOSE, 'log'), _defineProperty(_ConsoleMethod, LogLevel.INFO, 'info'), _defineProperty(_ConsoleMethod, LogLevel.WARN, 'warn'), _defineProperty(_ConsoleMethod, LogLevel.ERROR, 'error'), _ConsoleMethod);\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\nvar defaultLogHandler = function defaultLogHandler(instance, logType) {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  var now = new Date().toISOString();\n  var method = ConsoleMethod[logType];\n  if (method) {\n    var _console;\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    (_console = console)[method].apply(_console, [\"[\".concat(now, \"]  \").concat(instance.name, \":\")].concat(args));\n  } else {\n    throw new Error(\"Attempted to log a message with an invalid logType (value: \".concat(logType, \")\"));\n  }\n};\nvar Logger = /*#__PURE__*/function () {\n  /**\r\n   * Gives you an instance of a Logger to capture messages according to\r\n   * Firebase's logging scheme.\r\n   *\r\n   * @param name The name that the logs will be associated with\r\n   */\n  function Logger(name) {\n    _classCallCheck(this, Logger);\n    this.name = name;\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\n    this._logLevel = defaultLogLevel;\n    /**\r\n     * The main (internal) log handler for the Logger instance.\r\n     * Can be set to a new function in internal package code but not by user.\r\n     */\n    this._logHandler = defaultLogHandler;\n    /**\r\n     * The optional, additional, user-defined log handler for the Logger instance.\r\n     */\n    this._userLogHandler = null;\n    /**\r\n     * Capture the current instance for later use\r\n     */\n    instances.push(this);\n  }\n  _createClass(Logger, [{\n    key: \"logLevel\",\n    get: function get() {\n      return this._logLevel;\n    },\n    set: function set(val) {\n      if (!(val in LogLevel)) {\n        throw new TypeError(\"Invalid value \\\"\".concat(val, \"\\\" assigned to `logLevel`\"));\n      }\n      this._logLevel = val;\n    }\n    // Workaround for setter/getter having to be the same type.\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(val) {\n      this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n    }\n  }, {\n    key: \"logHandler\",\n    get: function get() {\n      return this._logHandler;\n    },\n    set: function set(val) {\n      if (typeof val !== 'function') {\n        throw new TypeError('Value assigned to `logHandler` must be a function');\n      }\n      this._logHandler = val;\n    }\n  }, {\n    key: \"userLogHandler\",\n    get: function get() {\n      return this._userLogHandler;\n    },\n    set: function set(val) {\n      this._userLogHandler = val;\n    }\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\n      this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\n    }\n  }, {\n    key: \"log\",\n    value: function log() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\n      this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.INFO].concat(args));\n      this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.WARN].concat(args));\n      this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\n    }\n  }, {\n    key: \"error\",\n    value: function error() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.ERROR].concat(args));\n      this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\n    }\n  }]);\n  return Logger;\n}();\nfunction setLogLevel(level) {\n  instances.forEach(function (inst) {\n    inst.setLogLevel(level);\n  });\n}\nfunction setUserLogHandler(logCallback, options) {\n  var _iterator = _createForOfIteratorHelper(instances),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var instance = _step.value;\n      var customLogLevel = null;\n      if (options && options.level) {\n        customLogLevel = levelStringToEnum[options.level];\n      }\n      if (logCallback === null) {\n        instance.userLogHandler = null;\n      } else {\n        instance.userLogHandler = function (instance, level) {\n          for (var _len7 = arguments.length, args = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {\n            args[_key7 - 2] = arguments[_key7];\n          }\n          var message = args.map(function (arg) {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          }).filter(function (arg) {\n            return arg;\n          }).join(' ');\n          if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n            logCallback({\n              level: LogLevel[level].toLowerCase(),\n              message: message,\n              args: args,\n              type: instance.name\n            });\n          }\n        };\n      }\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };","map":{"version":3,"names":["instances","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","_ConsoleMethod","_defineProperty","defaultLogHandler","instance","logType","logLevel","now","Date","toISOString","method","_console","_len","arguments","length","args","Array","_key","console","apply","concat","name","Error","Logger","_classCallCheck","_logLevel","_logHandler","_userLogHandler","push","_createClass","key","get","set","val","TypeError","setLogLevel","value","debug","_len2","_key2","log","_len3","_key3","info","_len4","_key4","warn","_len5","_key5","error","_len6","_key6","level","forEach","inst","setUserLogHandler","logCallback","options","_iterator","_createForOfIteratorHelper","_step","_loop","customLogLevel","userLogHandler","_len7","_key7","message","map","arg","toString","JSON","stringify","ignored","filter","join","toLowerCase","type","s","n","done","err","e","f"],"sources":["C:\\Users\\kouya\\node_modules\\@firebase\\logger\\src\\logger.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}